/*
 * Dalek.cpp
 *
 *  Created on: 23/05/2013
 *      Author: roger
 */

#include "Dalek.h"

static uint16_t myicon[] PROGMEM = {
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3186,0x5acb,0x1987,0x0000,0x0000,0x0000,0x0000,0x2945,0x4208,0xad55,0xce59,0xdedb,0x9492,0x6b4d,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x18c3,0x3186,0x3acd,0x528a,0x528a,0x528a,0x630c,0x9cd3,0xad55,0xb596,0xdedb,0xc618,0xe71c,0xd69a,0xa514,0x3186,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x528a,0x0000,0x0000,0x0000,0x0000,0xad55,0xb596,0xc618,0xdedb,0xef5d,0xffdf,0xef5d,0xd69a,0xc618,0x8c51,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x738e,0x4a49,0x9cd3,0x528a,0x6b4d,0x6b4d,0xad55,0x528a,0x528a,0x528a,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3186,0x6b4d,0x738e,0x9cd3,0x738e,0x7bcf,0x8410,0xa514,0x8c51,0x8410,0x9493,0x2104,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3186,0x0000,0x0000,0x8410,0x0000,0x0000,0x0000,0x6b4d,0x0000,0x0000,0x738e,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x6b4d,0x0000,0x0000,0x6b4d,0x0000,0x0000,0x0000,0x5acb,0x0000,0x0000,0x5acb,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x8c93,0x424a,0x52cb,0x9cd3,0x52cb,0x5acc,0x52cb,0x7c11,0x4249,0x3a4a,0x3209,0x18c4,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xb69b,0xb65a,0xc69a,0xdedb,0xe71c,0xd6db,0xc69a,0xb65a,0xa5d9,0x9dd8,0x9598,0xa65b,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xb555,0xa514,0xbdd7,0xd659,0xdedb,0xf79e,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xef5d,0xd659,0x630c,0x0000,0x0000,
	0xfd40,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xd71d,0xc69b,0xad97,0xb596,0xbdd7,0xc618,0xce59,0xce59,0xc659,0xc619,0xbe18,0xadd7,0xa556,0x2104,0x0000,0x0000,
	0xfd40,0x4a49,0x528a,0x5acb,0x4a49,0x528a,0x528a,0x52cb,0x5acb,0x528a,0x5acb,0x9492,0xe71c,0xc69b,0x9d56,0xcedb,0xdedc,0xdf1c,0xe71c,0xd6dc,0xd6db,0xbe5a,0xbe5a,0xae19,0xae19,0x530d,0x0000,0x0000,
	0xfd40,0x0000,0x0000,0x0000,0x0000,0x0000,0x6b4d,0x630c,0x2104,0x5acb,0x20c3,0x2146,0xe79f,0xa619,0xce5a,0xce9b,0xdedb,0xef5d,0xf79e,0xef5d,0xe75d,0xe75d,0xdf1c,0xd6dc,0xc65a,0x94d3,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x528a,0xa4d3,0xad55,0xbdd7,0xce59,0xd69a,0xe71c,0xf79e,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xe71c,0xd69a,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5acb,0xd69a,0xd69a,0xd69a,0xd69a,0xd69a,0xd659,0xffdf,0xef5d,0xef5d,0xe71c,0xef5d,0xef5d,0xffdf,0xffdf,0xa514,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2146,0x9ede,0xdf1d,0xa69d,0xbe5a,0xcedc,0xbf1e,0x961b,0xdf5e,0xb6dd,0x7e1c,0xe79e,0xbedd,0xa69d,0xe71c,0xb6dd,0x8e1c,0x5496,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2a0a,0x111c,0xbe5a,0x111c,0xd699,0xc69c,0x111c,0x6c94,0xcf5e,0x111c,0x3414,0xd75e,0x111c,0x6c94,0xf79d,0x5d9a,0x4455,0x111c,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xa514,0xe71b,0xde9a,0xeedb,0xe71c,0xdedb,0xf71b,0xffdf,0xffde,0xffde,0xffdf,0xf79e,0xff9e,0xffdf,0xef5d,0xef1c,0xffde,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5b8f,0x85db,0xc6dc,0xaede,0x961a,0xd69a,0xb69c,0x7e1c,0xffdf,0xbedd,0xaedd,0xc6dd,0xf75d,0xc71d,0x7e1c,0xf75d,0xb69c,0x8e5d,0xa6df,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x09c9,0x33d3,0xae19,0x111c,0x9597,0xdedb,0x5559,0x111c,0xffdf,0x9dd9,0x111c,0xa61a,0xf79e,0x4d19,0x111c,0xe71c,0xbe5a,0x111c,0x6c95,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xb596,0xd69a,0xce59,0xe69a,0xffdf,0xffdf,0xd659,0xde9a,0xffdf,0xef5d,0xff9d,0xffdf,0xffdf,0xf75d,0xf75d,0xe71c,0xe71c,0xffdf,0x528a,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x534e,0x7ddb,0xc617,0xb6de,0x8dda,0xffdf,0xae19,0xc71e,0x8598,0xffdf,0xb6dd,0x761c,0xffdf,0xffdf,0xb69c,0xaedd,0xbe9b,0xbe9b,0xaede,0xa69c,0x22ce,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x9556,0x111c,0xd659,0x111c,0x8d56,0xffdf,0x9d98,0x111c,0x7cd4,0xffdf,0x4d18,0x111c,0xffdf,0xffdf,0xae19,0x111c,0x9dd8,0xe6db,0x111c,0x7c94,0x00c5,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x18c3,0x8c51,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xbdd7,0xffdf,0xffdf,0xffdf,0xe6db,0xe6db,0xffdf,0xffdf,0xffdf,0xef1b,0xdedb,0xffdf,0xc5d7,0xb555,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x7517,0x759a,0xffdf,0xb69c,0x75db,0xffdf,0xffdf,0x9e5b,0x9e9d,0x8d56,0xffdf,0xbf1e,0x6d9b,0xffdf,0xffdf,0xffdf,0xbf1e,0x659b,0xde99,0x9e9d,0x7599,0x96de,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x6c12,0x63d0,0xc5d7,0x111c,0x8493,0xffdf,0xffdf,0x4456,0x111c,0xffdf,0xffdf,0x111c,0x6412,0xffdf,0xffdf,0xae5a,0x111c,0x5c12,0xce59,0x4c96,0x111c,0x4cd7,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x4208,0x8410,0xa514,0xffdf,0xc618,0xffdf,0xce59,0xad55,0xffdf,0xffdf,0xad55,0xdedb,0xe71b,0xad55,0xdedb,0xd69a,0xad55,0xffdf,0xffdf,0xad55,0xffdf,0xffdf,0xad55,
	0x0000,0x0000,0x0000,0x0000,0x2945,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0xffdf,0x0};


Dalek::Dalek() {
	currentColour = BLUE;
	circleSize = 1;
	m_width = Graphics.width();
	m_height = Graphics.height();
	m_cy = Graphics.height() / 2;
	m_cx = Graphics.width() / 2;
}
void Dalek::init() {
#ifdef DEBUG_DALEK
	Serial.print(getName());Serial.println(INIT);
#endif
	m_icon = new Icon(28,myicon);
	m_height = Graphics.height();
	m_width = Graphics.width();
	m_cy = Graphics.height() / 2;
	m_cx = Graphics.width() / 2;
	currentColour = BLUE;
	circleSize = 1;
}
void Dalek::setup() {
#ifdef DEBUG_DALEK
	Serial.println(PSTR("Dalek setup"));
#endif
	Graphics.fillScreen(BLACK);
	Graphics.setRotation(0);
	Graphics.setCursor(0,0);
	m_height = Graphics.height();
	m_width = Graphics.width();
	m_cy = Graphics.height() / 2;
	m_cx = Graphics.width() / 2;
	srand (0);
	for (unsigned int i=0;i<DALEK_COUNT;i++) {
		daleks[i] = NULL;
	}
	lastx = Hardware.getAccelerometerValues().x;
}
void Dalek::display() {
	Graphics.drawCircle(m_cx,m_cy,RADIUS*circleSize,BLACK);
	if (++circleSize > 8) {
		circleSize = 1;
		int x = Hardware.getAccelerometerValues().x;
		int deltaX = abs(x-lastx);
#ifdef DEBUG_DALEK
		Serial.print(PSTR("Dalek display"));
		Serial.print(PSTR(" x="));
		Serial.print(x);
		Serial.print(PSTR(" deltaX="));
		Serial.print(deltaX);
		Serial.print(PSTR(" SENSITIVITY="));
		Serial.println(SENSITIVITY);
#endif
		lastx = x;
		// if the x axis has moved then attempt to generate a dalek in one of the free slots
		if (deltaX > SENSITIVITY) {
			for (unsigned int i=0;i<DALEK_COUNT;i++) {
				if (daleks[i] == NULL) {
					daleks[i] = new DalekInstance(10+(rand() % (m_width-20)),10+(rand() % (m_height-20)),rand() % 5000000L, &m_smallIcon);
					break;
				}
			}
		}
	}
	for (unsigned int i=0;i<DALEK_COUNT;i++) {
		DalekInstance *d = daleks[i];
		if (d != NULL) {
			if (d->getVanishTime() < micros()) {
				d->erase();
				delete d;
				daleks[i] = NULL;
			}
		}
	}
	if (circleSize == 1) {
		int dalekCounter=0;
		for (unsigned int i=0;i<DALEK_COUNT;i++) {
			if (daleks[i] != NULL) {
				dalekCounter++;
			}
		}
		if (dalekCounter > 0) {
			Hardware.siren();
		}
#ifdef DEBUG_DALEK
		Serial.print(PSTR("dalekCounter "));
		Serial.println(dalekCounter);
#endif
	}
	Graphics.drawCircle(m_cx,m_cy,RADIUS*circleSize,currentColour);
}

Dalek::~Dalek() {
}

App *dalek = new Dalek();
