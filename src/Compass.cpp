/*
 * Compass.cpp
 *
 *  Created on: 28/04/2013
 *      Author: roger
 */

#include "Compass.h"

static uint16_t myicon[] PROGMEM = {
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1082,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x39c7,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0841,0x6b4d,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x9492,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xc618,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x18c3,0x528a,0x0841,0xee93,0x528a,0x2104,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2945,0xad55,0xe501,0xef1c,0x0000,0xe501,0xed88,0xe501,0xbdd7,0x39c7,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x630c,0xe501,0xe501,0xe501,0xb596,0x0000,0xe501,0xe71c,0xe501,0xe501,0xe501,0x7bcf,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x630c,0xe501,0xe501,0xc618,0x39c7,0x0841,0x0000,0xee0e,0x9492,0x3186,0xb596,0xe501,0xe501,0x8410,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2945,0xe501,0xe501,0xa514,0x0841,0x0000,0x0000,0x0000,0xee0e,0xbdd7,0x0000,0x0000,0x8410,0xe501,0xe501,0x4208,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xad55,0xe501,0xc618,0x0841,0x5acb,0x630c,0x0841,0x0000,0xee0e,0xef1a,0x0841,0x528a,0x0841,0xad55,0xe501,0xce59,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x18c3,0xe501,0xe501,0x39c7,0x0000,0x0000,0x7bcf,0x0841,0x0000,0xee0e,0xe501,0x7bcf,0x7bcf,0x0000,0x2104,0xe501,0xe501,0x3186,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x528a,0xe501,0xe71c,0x738e,0x9cd3,0xce59,0xe501,0x8410,0x0000,0xe501,0xa514,0x0841,0x0841,0x0841,0x0841,0x9cd3,0xe71c,0x738e,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x2945,0x5acb,0x8410,0xb596,0xe71c,0xe501,0xe501,0xe501,0xe501,0xe501,0xe501,0xe501,0x8410,0x9492,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0841,0x0000,0x0841,0x0000,0x0000,0x0000,
	0x0841,0x1082,0x1082,0x1082,0x1082,0x1082,0x1082,0x1082,0x1082,0x1082,0x1082,0x1082,0x1082,0x738e,0x8410,0xe501,0xed88,0xee0e,0xee0e,0xee0e,0xe501,0xe501,0xe501,0xce59,0x9cd3,0x6b4d,0x4208,0x1082,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x528a,0xce59,0x9492,0x0841,0x0000,0x0000,0x0000,0x630c,0xe501,0x1082,0x8410,0xedc9,0xed88,0xc618,0x9492,0xd69a,0xed88,0x738e,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x18c3,0xe501,0xe501,0x3186,0x0000,0x528a,0x8c51,0xe501,0xe501,0x1082,0x0000,0x8410,0x0841,0x0000,0x18c3,0xe501,0xedc9,0x39c7,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xbdd7,0xe501,0xb596,0x0000,0x738e,0x0841,0xd69a,0xe501,0x1082,0x0000,0x738e,0x6b4d,0x0000,0x9492,0xedc9,0xdedb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x39c7,0xe501,0xe501,0x8410,0x0841,0x0000,0xa514,0xe501,0x1082,0x0000,0x0000,0x0841,0x6b4d,0xe501,0xedc9,0x5acb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x7bcf,0xe501,0xe501,0xad55,0x2104,0x738e,0xe501,0x1082,0x0841,0x18c3,0x9492,0xe501,0xedc9,0x9cd3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x8410,0xe501,0xe501,0xe501,0xd69a,0xe501,0x1082,0x7bcf,0xe501,0xedc9,0xedc9,0x9cd3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4208,0xce59,0xe501,0xe501,0xe501,0x1082,0xc618,0xedc9,0xdedb,0x5acb,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3186,0x6b4d,0xef1c,0x1082,0x6b4d,0x39c7,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xbdd7,0x1082,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x8c51,0x1082,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5acb,0x1082,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3186,0x1082,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0841,0x1082,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0};

Compass::Compass(): App() {
	// Keep the constructor empty and do most things in the init()
	m_cy = 0;
	m_cx = 0;
	m_width = 0;
	m_cradius = 0;
	m_arrowSide = 0;
	m_height = 0;
}
void Compass::init() {
#ifdef COMPASS_DEBUG
	Serial.print(getName());Serial.println(INIT);
#endif
	m_icon = new Icon(28,myicon);
	m_height = Graphics.height();
	m_width = Graphics.width();
	m_cy = Graphics.height() / 2;
	m_cx = Graphics.width() / 2;
	m_cradius = min(m_cy,m_cx) * CIRCLE_PORTION;

	m_last.x = -1;
	m_last.y = -1;
	assert(m_last.y == -1);
	m_arrowSide = ARROW_LENGTH * cos(ARROW_WIDTH);
}
void Compass::setup() {
	Graphics.fillScreen(BLACK);
	Graphics.setRotation(0);
	Graphics.setCursor(0,0);
	m_height = Graphics.height();
	m_width = Graphics.width();
	m_cy = Graphics.height() / 2;
	m_cx = Graphics.width() / 2;
	m_cradius = min(m_cy,m_cx) * CIRCLE_PORTION;
	m_cycleCount = 10;
	Hardware.compass(true);
}
void Compass::close() {
	Hardware.compass(false);
	Graphics.setRotation(3);
}
void Compass::display() {
	int heading = Hardware.compassHeading();
	int correctedHeading = heading + Hardware.getCompassCorrection();
	double heading_radians = correctedHeading * PI / 180;
	if (m_cycleCount++ > 5) {
		m_cycleCount = 0;
		Graphics.fillScreen(BLACK);
		m_last.x = -1;
		m_last.y = -1;
	}
	if (m_last.x != -1 && m_last.y != -1) {
		arrow(m_last.x,m_last.y,last_heading_radians,BLACK);
	}
	Graphics.drawCircle(m_cx, m_cy, m_cradius, WHITE);
	double dy = ((double) m_cradius) * cos(heading_radians);
	double dx = ((double) m_cradius) * sin(heading_radians);
	m_last.x = m_cx + dx;
	m_last.y = m_cy + dy;
	last_heading_radians = heading_radians+PI;

	Graphics.drawLine(0,m_cy,Graphics.width(),m_cy,WHITE );
	Graphics.drawLine(m_cx,0,m_cx,Graphics.height(),WHITE );
	arrow(m_last.x,m_last.y,last_heading_radians,YELLOW);
	int h = heading-150;
	h = (h > 180) ? ((180 - h) + 180) * -1 : h;
	displayHeading(h);
}

void Compass::arrow(uint16_t x, uint16_t y, double angle_radians,
		uint16_t colour) {
	float tx = (m_arrowSide * sin(angle_radians + ARROW_WIDTH)) + x;
	float ty = (m_arrowSide * cos(angle_radians + ARROW_WIDTH)) + y;
	float bx = (m_arrowSide * sin(angle_radians - ARROW_WIDTH)) + x;
	float by = (m_arrowSide * cos(angle_radians - ARROW_WIDTH)) + y;
	Graphics.fillTriangle(x, y, tx, ty, bx, by, colour);
}

int Compass::displayHeading(int h)
{
//	Graphics.constructor(m_width,m_height); // Need this or the screen freezes.
	Graphics.fillCircle(m_cx, m_cy, m_cradius-ARROW_LENGTH, BLACK);
	Graphics.setRotation(3);
	Graphics.setCursor(m_cy-(m_cradius/3), m_cx-5);
	Graphics.setTextColor(WHITE);
	Graphics.setTextSize(2);
	Graphics.println(h);
	Graphics.setRotation(0);
	return h;
}

Compass::~Compass() {
}

App *compass = new Compass();


